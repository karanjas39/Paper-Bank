generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Program {
  id              Int            @id @default(autoincrement())
  name            String         @unique
  academicLevel   String
  users           User[]         @relation("ProgramUsers")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([name]) 
}

model User {
  id              Int          @id @default(autoincrement())
  name            String
  email           String       @unique
  password        String
  verified        Boolean       @default(false)
  otp             String        @default("")
  admin           Boolean       @default(false)
  program         Program  @relation("ProgramUsers", fields: [programId], references: [id])
  programId       Int
  uploadCount     Int      @default(0)    
  maxUploads      Int      @default(10)
  questionPapers  QuestionPaper[] @relation("UserQuestionPapers")
  reviewedPapers  QuestionPaper[] @relation("ReviewedQuestionPapers")
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@index([email]) 
  @@index([programId]) 
}

model QuestionPaper {
  id              Int          @id @default(autoincrement())
  courseName      String
  courseCode      String
  fileKeys        String[]     @unique
  year            String
  examType        String       // 'MSE' or 'ESE'
  status          String       @default("pending") // 'pending', 'approved', 'rejected'
  submittedAt     DateTime     @default(now())
  reviewedAt      DateTime?
  user            User         @relation("UserQuestionPapers", fields: [userId], references: [id])
  userId          Int
  reviewer        User        @relation("ReviewedQuestionPapers", fields: [reviewerId], references: [id])
  reviewerId      Int
  updatedAt       DateTime     @updatedAt

  @@index([status]) 
  @@index([userId]) 
  @@index([reviewerId]) 
}
