generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Program {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  users           User[]            @relation("ProgramUsers")
  questionPapers  QuestionPaper[]   @relation("ProgramQP")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([name]) 
}

model User {
  id              Int          @id @default(autoincrement())
  name            String
  email           String       @unique
  password        String
  verified        Boolean       @default(false)
  admin           Boolean       @default(false)
  program         Program  @relation("ProgramUsers", fields: [programId], references: [id])
  programId       Int
  uploadCount     Int      @default(0)    
  questionPapers  QuestionPaper[] @relation("UserQuestionPapers")
  reviewedPapers  QuestionPaper[] @relation("ReviewedQuestionPapers")
  notifications   Notification[]  @relation("UserNotifications")
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@index([email]) 
  @@index([programId]) 
}

model QuestionPaper {
  id              Int          @id @default(autoincrement())
  courseName      String
  courseCode      String
  fileKey         String     @unique
  year            Int
  examType        String       // 'MSE' , 'ESE' or 'REAPPEAR'
  status          String       @default("pending") // 'pending', 'approved', 'rejected'
  user            User         @relation("UserQuestionPapers", fields: [userId], references: [id])
  userId          Int
  program         Program  @relation("ProgramQP", fields: [programId], references: [id])
  programId       Int
  reviewer        User?        @relation("ReviewedQuestionPapers", fields: [reviewerId], references: [id])
  reviewerId      Int?
  updatedAt       DateTime     @updatedAt
  submittedAt     DateTime     @default(now())

  @@index([status]) 
  @@index([userId]) 
  @@index([reviewerId]) 
}

model Notification{
  id         Int @id @default(autoincrement())
  message    String
  createdAt  DateTime     @default(now())
  user       User         @relation("UserNotifications",fields: [userId], references: [id])
  userId     Int
}
